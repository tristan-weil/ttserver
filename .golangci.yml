run:
  timeout: 5m

linters-settings:
  errcheck:
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 160
    # tab width in spaces. Default to 1.
    tab-width: 1
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  whitespace:
    multi-if: true   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: true # Enforces newlines (or comments) after every multi-line function signature
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    enabled-checks:
      - rangeValCopy
    disabled-checks:
      - ifElseChain
      - singleCaseSwitch

linters:
  disable-all: true
  enable:
    - deadcode # Finds unused code
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck # Finds unused struct fields
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # Checks Go code for unused constants, variables, functions and types [fast # false, auto-fix # false]
    - varcheck # Finds unused global variables and constants
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # checks whether HTTP response body is closed successfully
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl # Tool for code clone detection
    - errorlint # go-errorlint is a source code linter for Go software that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exhaustive # check exhaustiveness of enum switch statements
    # - exhaustivestruct # Checks if all struct's fields are initialized
    - exportloopref # checks for pointers to enclosing loop variables
    # - funlen # Tool for detection of long functions
    - gci # Gci control golang package import order and make it always deterministic.
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits # Checks that no init functions are present in Go code
    # - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # The most opinionated Go source code linter
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godot # Check if comments end in a period
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - goerr113 # Golang linter to check the errors handling expressions
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt # Gofumpt checks whether code was gofumpt-ed.
    - goheader # Checks is file header matches to pattern
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports
    - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    # - gomnd # An analyzer to detect magic numbers.
    - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosec # Inspects source code for security problems
    - interfacer # Linter that suggests narrower interface types
    - lll # Reports long lines
    - maligned # Tool to detect Go structs that would take less memory if their fields were sorted
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    # - nestif # Reports deeply nested if statements
    # - nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx # noctx finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - prealloc # Finds slice declarations that could potentially be preallocated
    - rowserrcheck # checks whether Err of rows is checked successfully
    - scopelint # Scopelint checks for unpinned variables in go programs
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - stylecheck # Stylecheck is a replacement for golint
    - testpackage # linter that makes you use a separate _test package
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - whitespace # Tool for detection of leading and trailing whitespace
    - wrapcheck # Checks that errors returned from external packages are wrapped
    # - wsl # Whitespace Linter - Forces you to use empty lines!
